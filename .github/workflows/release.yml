name: Build an release binaries

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux, windows, darwin ]
        goarch: [ amd64, arm64 ]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Build
        run: make build GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./prom-scrape-analyzer-*

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        name: Download build artifacts
        with:
          pattern: build-artifacts*
          merge-multiple: true
      - name: Zip final release files
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          for file in prom-scrape-analyzer-*; do
            if [[ $file == *windows* ]]; then
              ext=".exe"
            else
              ext=""
            fi
            os_arch=$(echo $file | sed -E 's/prom-scrape-analyzer-(.+)/\1/')
            mkdir -p "release-$os_arch"
            cp "$file" "release-$os_arch/prom-scrape-analyzer$ext"
            cp README.md "release-$os_arch/"
            echo "$VERSION" > "release-$os_arch/VERSION"
            zip -r "prom-scrape-analyzer-$VERSION-$os_arch.zip" "release-$os_arch"
          done
      - name: Upload Release Asset
        uses: AButler/upload-release-assets@v3.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          files: ./prom-scrape-analyzer-*.zip
          release-tag: ${{ github.ref }}
